# 4-Queen / N-Queen problem

def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 'Q':
            return False

    
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j -= 1


    i, j = row, col
    while i >= 0 and j < n:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j += 1

    return True

def solve_queens(board, row, n):
    if row == n:
        print_board(board)
        return True
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 'Q'
            if solve_queens(board, row + 1, n):
                return True
            board[row][col] = '.'
    return False

def four_queens():
    n = 4
    board = [['.' for _ in range(n)] for _ in range(n)]
    if not solve_queens(board, 0, n):
        print("No solution found")

four_queens()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Tower of Hanoi problem

def tower_of_hanoi(n, a,b,c):
    if n==1:
        print(f"move disk 1 from {a} to {c}")
        return
    tower_of_hanoi (n-1, a,c,b)
    print(f"move disk {n} from {a} to {c}")
    tower_of_hanoi (n-1,  b,a,c)
num_disks = 4
tower_of_hanoi(num_disks, 'A','B','C')
