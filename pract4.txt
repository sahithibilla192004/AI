Q1 greedy
def greedy_best_first_search(graph, heuristics, start, goal):
    open_list = [start]
    visited = set()
    parent = {start: None}

    while open_list:
        current = min(open_list, key=lambda x: heuristics[x])
        print(f"Expanding node: {current} with h={heuristics[current]}")
        open_list.remove(current)
        visited.add(current)

        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            return path[::-1]

        for neighbor in graph.get(current, []):
            if neighbor not in visited and neighbor not in open_list:
                parent[neighbor] = current
                open_list.append(neighbor)

    return None

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['G'],
    'F': ['G'],
    'G': []
}

heuristics = {
    'A': 5,
    'B': 3,
    'C': 4,
    'D': 6,
    'E': 2,
    'F': 5,
    'G': 0
}

start = 'A'
goal = 'G'
path = greedy_best_first_search(graph, heuristics, start, goal)
print("Path found:", path)


Q2 A*

graph = {
    'A': [('B',5), ('C',4)],
    'B': [('D',8), ('E',2)],
    'C': [('E',3), ('F',4)],
    'D': [],
    'E': [('G',1)],
    'F': [('G',5)],
    'G': []
}

heuristics = {
    'A':7, 'B':6, 'C':4, 'D':3, 'E':2, 'F':5, 'G':0
}

def a_star(graph, heuristics, start, goal):
    open_list = [(heuristics[start], 0, start, [start])]
    while open_list:
        open_list.sort()
        f, g, current, path = open_list.pop(0)
        if current == goal:
            return path
        for neighbor, cost in graph.get(current, []):
            if neighbor not in path:
                new_g = g + cost
                new_f = new_g + heuristics[neighbor]
                open_list.append((new_f, new_g, neighbor, path + [neighbor]))
    return None

start = 'A'
goal = 'G'
path = a_star(graph, heuristics, start, goal)
print("Path found:", path)

